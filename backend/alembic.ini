# ======================================================================
# 🧠 ALEMBIC CONFIGURATION FILE
# ======================================================================
# Ce fichier configure Alembic, l’outil de migration SQLAlchemy.
# Il permet de gérer les migrations de schéma de base de données
# (ajout de tables, colonnes, contraintes, etc.)
# ======================================================================


# ----------------------------------------------------------------------
# [alembic] — section principale
# ----------------------------------------------------------------------
[alembic]

# 📁 Chemin vers le dossier des scripts de migration.
# Par défaut, Alembic crée un dossier "migrations" ou "alembic" à la racine.
# "%(here)s" désigne le dossier où se trouve ce fichier ini.
script_location = %(here)s/migrations


# 🔗 URL de connexion à la base (PostgreSQL, SQLite, etc.)
# ❗️Laisse cette ligne VIDE car on la définit dynamiquement
# depuis "migrations/env.py" via une variable d'environnement (.env)
# Exemple dans env.py : config.set_main_option("sqlalchemy.url", os.getenv("ALEMBIC_DATABASE_URL"))
sqlalchemy.url =


# 🧩 Modèle de nommage des fichiers de migration (facultatif)
# Par défaut : "rev-slug" (ex: 1234_add_user_table.py)
# Tu peux activer le format "horodaté" (date + heure) :
# file_template = %%(year)d_%%(month).2d_%%(day).2d-%%(rev)s_%%(slug)s


# 🕒 Fuseau horaire utilisé dans les noms de fichiers (optionnel)
# timezone = Europe/Paris


# 🔍 Séparateur de chemin (ne pas modifier)
# Utilisé si tu as plusieurs répertoires de versions.
path_separator = os


# ----------------------------------------------------------------------
# [post_write_hooks] — outils automatiques sur les fichiers de migration
# ----------------------------------------------------------------------
[post_write_hooks]
# Tu peux exécuter des outils comme "black" ou "ruff" après chaque migration.
# Exemples :
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 88 REVISION_SCRIPT_FILENAME


# ----------------------------------------------------------------------
# [loggers], [handlers], [formatters] — gestion des logs Alembic
# ----------------------------------------------------------------------

[loggers]
# Liste des loggers actifs.
keys = root,sqlalchemy,alembic

[handlers]
# Définit les types de gestionnaires de logs (ici, sortie console)
keys = console

[formatters]
# Liste des formatters (mise en forme du texte de log)
keys = generic


# --- Logger principal ---
[logger_root]
level = WARNING
handlers = console
qualname =

# --- Logger SQLAlchemy (affiche les requêtes SQL) ---
# Change "level" en INFO pour déboguer les requêtes SQL générées
[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

# --- Logger Alembic (migrations) ---
[logger_alembic]
level = INFO
handlers =
qualname = alembic


# --- Handler console ---
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic


# --- Format des logs ---
[formatter_generic]
# Format du message affiché dans le terminal
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


# ======================================================================
# 💡 NOTES PRATIQUES
# ======================================================================
# 🔹 Ce fichier est lu automatiquement par Alembic (commande : alembic upgrade head)
# 🔹 Il ne doit PAS contenir de mot de passe en dur.
# 🔹 L’URL réelle de connexion (Neon, Supabase, Render, etc.)
#    doit être dans ton fichier .env sous la clé ALEMBIC_DATABASE_URL :
#
#    ALEMBIC_DATABASE_URL=postgresql+psycopg2://USER:PASSWORD@HOST_DIRECT:5432/DBNAME?sslmode=require
#
# 🔹 Ton fichier migrations/env.py injecte cette URL dans la config Alembic :
#    config.set_main_option("sqlalchemy.url", os.getenv("ALEMBIC_DATABASE_URL"))
#
# 🔹 Pour lancer les migrations :
#    $ alembic upgrade head
#
# 🔹 Pour créer une nouvelle migration :
#    $ alembic revision --autogenerate -m "Ajout table machines"
#
# 🔹 Les scripts seront créés dans :
#    migrations/versions/
#
# 🔹 Pour lister les migrations :
#    $ alembic history
# ======================================================================
