# ============================================================
# app/security.py
# ------------------------------------------------------------
# üîê Gestion de la s√©curit√© et de l‚Äôauthentification
# ------------------------------------------------------------
# Fonctions :
#   - hash_password()  : hachage s√©curis√© des mots de passe
#   - verify_password(): v√©rification des mots de passe
#   - create_access_token(): g√©n√©ration d‚Äôun JWT
#   - decode_token()   : d√©codage / validation d‚Äôun JWT
# ============================================================

from datetime import datetime, timedelta, timezone
from typing import Optional
import os

from jose import jwt, JWTError
from passlib.context import CryptContext

# ============================================================
# ‚öôÔ∏è Param√®tres globaux
# ============================================================

# Cl√© secr√®te pour signer les tokens JWT
# ‚ö†Ô∏è En production, la cl√© doit venir d‚Äôune variable d‚Äôenvironnement !
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-change-me")

# Algorithme de signature JWT (HS256 = standard sym√©trique)
ALGORITHM = "HS256"

# Dur√©e de validit√© du token d‚Äôacc√®s (en minutes)
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "60"))

# ============================================================
# üîë Gestion du hachage des mots de passe
# ============================================================
# bcrypt_sha256 : Passlib fait d‚Äôabord un SHA256 ‚Üí supprime la limite de 72 bytes
# et renforce l√©g√®rement la s√©curit√© contre certains vecteurs d‚Äôattaque.
pwd_context = CryptContext(schemes=["bcrypt_sha256"], deprecated="auto")


def hash_password(plain_password: str) -> str:
    """
    Hache un mot de passe en clair avec bcrypt_sha256.
    Retourne une cha√Æne de hachage s√©curis√©e (stockable en base).
    """
    return pwd_context.hash(plain_password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    V√©rifie qu‚Äôun mot de passe correspond √† son hash.
    Retourne True si ok, False sinon.
    """
    return pwd_context.verify(plain_password, hashed_password)


# ============================================================
# üßæ Gestion des tokens JWT
# ============================================================

def create_access_token(
    data: dict,
    expires_minutes: int = ACCESS_TOKEN_EXPIRE_MINUTES
) -> str:
    """
    G√©n√®re un token JWT sign√© contenant les donn√©es fournies.
    Exemple de payload : {"sub": user_id, "role": "admin"}
    """
    to_encode = data.copy()

    # Expiration du token
    expire = datetime.now(timezone.utc) + timedelta(minutes=expires_minutes)
    to_encode.update({"exp": expire})

    # G√©n√©ration du JWT sign√© avec la cl√© secr√®te
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


def decode_token(token: str) -> Optional[dict]:
    """
    D√©code et valide un token JWT.
    Retourne le payload (dict) si valide, sinon None.
    """
    try:
        return jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    except JWTError:
        # Token expir√©, malform√© ou cl√© invalide
        return None
