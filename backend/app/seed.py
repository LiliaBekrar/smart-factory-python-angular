# ============================================================
# app/seed.py
# ------------------------------------------------------------
# üå± Script de ‚Äúseed‚Äù (pr√©-remplissage) de la base de donn√©es.
# - Cr√©e les utilisateurs de base (admin, chef, op√©rateur)
# - Ajoute des machines, ordres de fabrication et √©v√©nements
# - S‚Äôex√©cute automatiquement au d√©marrage si SEED_ON_START=True
# ============================================================

from datetime import datetime, timedelta, date
import random
import traceback
from sqlalchemy.orm import Session
from sqlalchemy import select, func, text

from .db import SessionLocal
from .models import Machine, WorkOrder, ProductionEvent, User
from .security import hash_password

from .security import pwd_context
import app.security as sec
print("üîí [seed] Passlib schemes =", pwd_context.schemes())
print("üì¶ [seed] security module file =", sec.__file__)


def seed():
    """
    Initialise la base avec des donn√©es r√©alistes :
    - 3 utilisateurs
    - 5 machines
    - 3 ordres de fabrication
    - un historique d‚Äô√©v√©nements r√©partis sur 30 jours
    """

    # Ouvre une session SQLAlchemy
    db: Session = SessionLocal()

    try:
        # ------------------------------------------------------------
        # üß© LOG D√âBUT : Affiche la base cible
        # ------------------------------------------------------------
        try:
            current_db = db.execute(text("SELECT current_database() AS name")).mappings().first()
            print("Seeding DB ‚Üí", db.get_bind().url)
            print("‚Üí Current database:", current_db["name"] if current_db else "inconnue")
        except Exception:
            print("Seeding DB ‚Üí", db.get_bind().url, "(no DB name query)")

        # ------------------------------------------------------------
        # üë• 1) Utilisateurs (idempotent)
        # ------------------------------------------------------------
        users_payload = [
            {"email": "admin@test.fr", "hashed_password": hash_password("pass1234"), "role": "admin"},
            {"email": "chef@test.fr",  "hashed_password": hash_password("pass1234"), "role": "chef"},
            {"email": "op@test.fr",    "hashed_password": hash_password("pass1234"), "role": "operator"},
        ]

        created_users = 0
        for u in users_payload:
            # On v√©rifie avant d‚Äôins√©rer ‚Üí √©vite erreur sans contrainte UNIQUE
            exists = db.query(User).filter(User.email == u["email"]).first()
            if not exists:
                db.add(User(**u))
                created_users += 1

        db.flush()  # √âcrit les changements dans la transaction sans commit
        total_users = db.scalar(select(func.count()).select_from(User))
        print(f"‚úî Utilisateurs ‚Üí ajout√©s: {created_users}, total en base: {total_users}")

        # ------------------------------------------------------------
        # ‚öôÔ∏è 2) Machines
        # ------------------------------------------------------------
        if db.scalar(select(func.count()).select_from(Machine)) == 0:
            machines = [
                Machine(name="Fraiseuse Mazak", code="CNC-01", status="running", target_rate_per_hour=40),
                Machine(name="Tour Haas",       code="CNC-02", status="running", target_rate_per_hour=55),
                Machine(name="5 axes DMG",      code="CNC-03", status="setup",   target_rate_per_hour=30),
                Machine(name="Centre Hermle",   code="CNC-04", status="stopped", target_rate_per_hour=25),
                Machine(name="Robot Fanuc",     code="ROB-01", status="running", target_rate_per_hour=80),
            ]
            db.add_all(machines)
            db.flush()
            print(f"‚úî {len(machines)} machines cr√©√©es")
        else:
            print("‚Ü≥ Machines d√©j√† pr√©sentes ‚Üí rien ajout√©")

        # ------------------------------------------------------------
        # üßæ 3) Ordres de fabrication (WorkOrders)
        # ------------------------------------------------------------
        if db.scalar(select(func.count()).select_from(WorkOrder)) == 0:
            orders = [
                WorkOrder(number="OF-2025-0001", client="ACME",    part_ref="P-12", target_qty=200, due_on=date.today() + timedelta(days=7)),
                WorkOrder(number="OF-2025-0002", client="Globex",  part_ref="R-77", target_qty=120, due_on=date.today() + timedelta(days=3)),
                WorkOrder(number="OF-2025-0003", client="Initech", part_ref="K-03", target_qty=500, due_on=date.today() + timedelta(days=14)),
            ]
            db.add_all(orders)
            db.flush()
            print(f"‚úî {len(orders)} ordres de fabrication cr√©√©s")
        else:
            print("‚Ü≥ WorkOrders d√©j√† pr√©sents ‚Üí rien ajout√©")

        # ------------------------------------------------------------
        # üè≠ 4) √âv√©nements de production
        # ------------------------------------------------------------
        if db.scalar(select(func.count()).select_from(ProductionEvent)) == 0:
            machines = db.query(Machine).all()
            work_orders = db.query(WorkOrder).all()
            now = datetime.utcnow()
            events: list[ProductionEvent] = []

            rng = random.Random(42)
            for day in range(30):  # 30 derniers jours
                for m in machines:
                    for _ in range(rng.randint(3, 6)):  # 3 √† 6 √©v√©nements par jour et par machine
                        kind = rng.choices(["good", "scrap", "stop"], weights=[0.75, 0.15, 0.10])[0]
                        qty = rng.randint(1, 8) if kind in ("good", "scrap") else 0
                        wo = rng.choice(work_orders + [None])
                        minutes_ago = day * 24 * 60 + rng.randint(0, 24 * 60 - 1)

                        # Notes optionnelles
                        note = None
                        if kind == "scrap":
                            note = rng.choice(["copeau long", "outil us√©", "mauvaise cote", "bavure"])
                        elif kind == "stop":
                            note = rng.choice(["changement d'outil", "maintenance", "pause", "alimentation mati√®re"])

                        events.append(ProductionEvent(
                            machine_id=m.id,
                            work_order_id=wo.id if wo else None,
                            event_type=kind,
                            qty=qty,
                            happened_at=now - timedelta(minutes=minutes_ago),
                            notes=note,
                        ))

            db.add_all(events)
            print(f"‚úî {len(events)} √©v√©nements cr√©√©s")
        else:
            print("‚Ü≥ √âv√©nements d√©j√† pr√©sents ‚Üí pas de duplication")

        # ------------------------------------------------------------
        # üíæ Validation finale
        # ------------------------------------------------------------
        db.commit()
        print("‚úÖ Seed termin√© avec succ√®s (users + machines + OF + events)")

    except Exception as e:
        # En cas d‚Äôerreur ‚Üí rollback complet et affichage d√©taill√©
        db.rollback()
        print("‚ùå Seed √©chou√© ‚Üí rollback :", repr(e))
        traceback.print_exc()
        raise
    finally:
        db.close()
        print("üîö Session ferm√©e proprement")


# ------------------------------------------------------------
# ‚öôÔ∏è Si ex√©cut√© directement (python -m app.seed)
# ------------------------------------------------------------
if __name__ == "__main__":
    seed()
