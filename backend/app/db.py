# backend/app/db.py
"""
üì¶ Module : Base de donn√©es SQLAlchemy (version synchrone)
=========================================================

Ce module configure :
- le moteur SQLAlchemy (`create_engine`)
- la session (`SessionLocal`)
- la base d√©clarative (`Base`)

‚öôÔ∏è Utilisation :
    from app.db import SessionLocal, Base
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from .settings import settings

# -------------------------------------------------
# 1Ô∏è‚É£ R√©cup√©ration de l'URL de la base depuis les variables d'environnement
# -------------------------------------------------
#   Exemple attendu :
#   DATABASE_URL = "postgresql+psycopg2://USER:PASSWORD@HOST_POOLED:5432/DBNAME?sslmode=require"
#
# üëâ Cette variable est d√©finie sur Render (onglet Environment)
# üëâ Le fichier app/settings.py lit cette valeur via python-dotenv ou os.environ
# -------------------------------------------------
DATABASE_URL = settings.database_url

if not DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL manquante ‚Äî v√©rifie les variables Render.")

# -------------------------------------------------
# 2Ô∏è‚É£ Cr√©ation du moteur SQLAlchemy (mode synchrone)
# -------------------------------------------------
# future=True ‚Üí compatibilit√© SQLAlchemy 2.0
# pool_pre_ping=True ‚Üí v√©rifie la connexion avant chaque requ√™te (utile sur Render)
# -------------------------------------------------
engine = create_engine(
    DATABASE_URL,
    future=True,
    pool_pre_ping=True,
)

# -------------------------------------------------
# 3Ô∏è‚É£ Fabrique de sessions (SessionLocal)
# -------------------------------------------------
# autocommit=False : on valide explicitement avec .commit()
# autoflush=False  : pas de flush automatique √† chaque requ√™te
# -------------------------------------------------
SessionLocal = sessionmaker(
    bind=engine,
    autocommit=False,
    autoflush=False,
)

# -------------------------------------------------
# 4Ô∏è‚É£ Classe de base pour les mod√®les
# -------------------------------------------------
# Tous les mod√®les SQLAlchemy doivent h√©riter de Base
# Exemple :
#     class User(Base):
#         __tablename__ = "users"
#         id = Column(Integer, primary_key=True)
# -------------------------------------------------
Base = declarative_base()
