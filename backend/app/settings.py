# app/settings.py
from pathlib import Path
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

BASE_DIR = Path(__file__).resolve().parents[1]

class Settings(BaseSettings):
    # üóÑÔ∏è Base de donn√©es
    database_url: str = Field(
        default=f"sqlite:///{(BASE_DIR / 'smart_factory.db').as_posix()}",
        description="Database URL (SQLite local ou PostgreSQL/Neon sur Render)",
    )

    # üîê JWT / S√©curit√©
    secret_key: str = Field(
        default="dev-secret",
        description="Cl√© secr√®te pour signer les JWT",
    )
    access_token_expire_minutes: int = Field(
        default=60,
        description="Dur√©e de vie du token d'acc√®s (en minutes)",
    )

    # üå± Drapeaux d'environnement
    seed_on_start: bool = Field(
        default=False,
        description="Si vrai ‚Üí ex√©cute app.seed au d√©marrage",
    )
    debug: bool = Field(
        default=True,
        description="Active le mode debug (FastAPI + logs verbeux)",
    )

    # ‚öôÔ∏è Simulation (pilotables par env)
    simulate_enabled: bool = Field(default=True, description="Active la simulation d'√©v√©nements")
    simulate_interval_seconds: int = Field(default=60, description="Intervalle entre ticks de simulation")
    simulate_min_per_tick: int = Field(default=1, description="Min d'√©v√©nements par tick")
    simulate_max_per_tick: int = Field(default=3, description="Max d'√©v√©nements par tick")

    # ‚öôÔ∏è Config Pydantic
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        env_file_optional=True,
        extra="ignore",
        case_sensitive=False,
    )

settings = Settings()

if settings.debug:
    print("üß© [settings] Configuration charg√©e :")
    print(f"   DATABASE_URL   = {settings.database_url}")
    print(f"   SEED_ON_START  = {settings.seed_on_start}")
    print(f"   DEBUG           = {settings.debug}")
    print(f"   SECRET_KEY len  = {len(settings.secret_key)} chars")
